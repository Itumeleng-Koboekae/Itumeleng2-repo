name: Database Deployment Pipeline

on: [push]

jobs:
  dev-deployment:
    name: Deploy to DEV
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg

      - name: Add Microsoft SQL Server repository
        run: |
          UBUNTU_VERSION=$(lsb_release -rs)
          if [[ "$UBUNTU_VERSION" == "24.04" ]]; then
            echo "Using Ubuntu 22.04 packages for compatibility"
            UBUNTU_VERSION="22.04"
            CODENAME="jammy"
          else
            CODENAME=$(lsb_release -cs)
          fi
          
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/ubuntu/$UBUNTU_VERSION/prod $CODENAME main" | sudo tee /etc/apt/sources.list.d/mssql-release.list

      - name: Install SQL Server tools
        run: |
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> $GITHUB_ENV

      - name: Verify SQLCMD installation
        run: |
          /opt/mssql-tools/bin/sqlcmd -?
          echo "SQLCMD version check successful"

      - name: Test network connectivity to SQL Server
        run: |
          SERVER=$(echo "$DEV_SQL_SERVER" | cut -d',' -f1 | cut -d':' -f1)
          PORT=$(echo "$DEV_SQL_SERVER" | cut -d',' -f1 | cut -d':' -f2)
          PORT=${PORT:-1433}  # Default to 1433 if port not specified
          
          echo "Testing connection to $SERVER on port $PORT"
          nc -zvw3 $SERVER $PORT || echo "Network connectivity test failed"
        env:
          DEV_SQL_SERVER: ${{ secrets.DEV_SQL_SERVER }}

      - name: Test DEV SQL Server connection
        run: |
          echo "Attempting to connect to SQL Server..."
          /opt/mssql-tools/bin/sqlcmd -S "$DEV_SQL_SERVER" -U "$DEV_SQL_USER" -P "$DEV_SQL_PASSWORD" \
            -Q "SET NOCOUNT ON; SELECT 'Connection successful' AS Result, @@VERSION AS Version;" \
            -b -o test_output.log
            
          if [ $? -eq 0 ]; then
            echo "Connection successful!"
            cat test_output.log
          else
            echo "Connection failed. Error output:"
            cat test_output.log
            exit 1
          fi
        env:
          DEV_SQL_SERVER: ${{ secrets.DEV_SQL_SERVER }}
          DEV_SQL_USER: ${{ secrets.DEV_SQL_USER }}
          DEV_SQL_PASSWORD: ${{ secrets.DEV_SQL_PASSWORD }}

      - name: Run SQL Script on DEV
        run: |
          echo "Executing setup script..."
          /opt/mssql-tools/bin/sqlcmd -S "$DEV_SQL_SERVER" -U "$DEV_SQL_USER" -P "$DEV_SQL_PASSWORD" \
            -d master -i setup.sql -b -o sql_output.log
            
          if [ $? -eq 0 ]; then
            echo "Script executed successfully:"
            cat sql_output.log
          else
            echo "Script execution failed. Error output:"
            cat sql_output.log
            exit 1
          fi
        env:
          DEV_SQL_SERVER: ${{ secrets.DEV_SQL_SERVER }}
          DEV_SQL_USER: ${{ secrets.DEV_SQL_USER }}
          DEV_SQL_PASSWORD: ${{ secrets.DEV_SQL_PASSWORD }}

  prod-deployment:
    name: Deploy to PROD
    needs: dev-deployment
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg netcat

      - name: Add Microsoft SQL Server repository
        run: |
          UBUNTU_VERSION=$(lsb_release -rs)
          if [[ "$UBUNTU_VERSION" == "24.04" ]]; then
            echo "Using Ubuntu 22.04 packages for compatibility"
            UBUNTU_VERSION="22.04"
            CODENAME="jammy"
          else
            CODENAME=$(lsb_release -cs)
          fi
          
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/ubuntu/$UBUNTU_VERSION/prod $CODENAME main" | sudo tee /etc/apt/sources.list.d/mssql-release.list

      - name: Install SQL Server tools
        run: |
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> $GITHUB_ENV

      - name: Verify SQLCMD installation
        run: |
          /opt/mssql-tools/bin/sqlcmd -?
          echo "SQLCMD version check successful"

      - name: Test network connectivity to SQL Server
        run: |
          SERVER=$(echo "$PROD_SQL_SERVER" | cut -d',' -f1 | cut -d':' -f1)
          PORT=$(echo "$PROD_SQL_SERVER" | cut -d',' -f1 | cut -d':' -f2)
          PORT=${PORT:-1433}  # Default to 1433 if port not specified
          
          echo "Testing connection to $SERVER on port $PORT"
          nc -zvw3 $SERVER $PORT || echo "Network connectivity test failed"
        env:
          PROD_SQL_SERVER: ${{ secrets.PROD_SQL_SERVER }}

      - name: Test PROD SQL Server connection
        run: |
          echo "Attempting to connect to PROD SQL Server..."
          /opt/mssql-tools/bin/sqlcmd -S "$PROD_SQL_SERVER" -U "$PROD_SQL_USER" -P "$PROD_SQL_PASSWORD" \
            -Q "SET NOCOUNT ON; SELECT 'PROD Connection successful' AS Result, @@VERSION AS Version;" \
            -b -o test_output.log
            
          if [ $? -eq 0 ]; then
            echo "PROD Connection successful!"
            cat test_output.log
          else
            echo "PROD Connection failed. Error output:"
            cat test_output.log
            echo "Troubleshooting tips:"
            echo "1. Verify the SQL Server is running and accessible"
            echo "2. Check firewall rules allow connections on port 1433 (or your custom port)"
            echo "3. Verify the credentials are correct"
            echo "4. Check if SQL Server is configured for mixed mode authentication"
            exit 1
          fi
        env:
          PROD_SQL_SERVER: ${{ secrets.PROD_SQL_SERVER }}
          PROD_SQL_USER: ${{ secrets.PROD_SQL_USER }}
          PROD_SQL_PASSWORD: ${{ secrets.PROD_SQL_PASSWORD }}

      - name: Run SQL Script on PROD
        run: |
          echo "Executing setup script on PROD..."
          /opt/mssql-tools/bin/sqlcmd -S "$PROD_SQL_SERVER" -U "$PROD_SQL_USER" -P "$PROD_SQL_PASSWORD" \
            -d master -i setup.sql -b -o sql_output.log
            
          if [ $? -eq 0 ]; then
            echo "PROD script executed successfully:"
            cat sql_output.log
          else
            echo "PROD script execution failed. Error output:"
            cat sql_output.log
            exit 1
          fi
        env:
          PROD_SQL_SERVER: ${{ secrets.PROD_SQL_SERVER }}
          PROD_SQL_USER: ${{ secrets.PROD_SQL_USER }}
          PROD_SQL_PASSWORD: ${{ secrets.PROD_SQL_PASSWORD }}
