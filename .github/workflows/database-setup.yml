name: Database Deployment Pipeline

on: [push]

jobs:
  dev-deployment:
    name: Deploy to DEV
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg lsb-release

      - name: Add Microsoft SQL Server repository
        run: |
          # For Ubuntu 24.04, we'll use the 22.04 packages as they're compatible
          UBUNTU_VERSION=$(lsb_release -rs)
          if [[ "$UBUNTU_VERSION" == "24.04" ]]; then
            echo "Using Ubuntu 22.04 packages for compatibility"
            UBUNTU_VERSION="22.04"
            CODENAME="jammy"
          else
            CODENAME=$(lsb_release -cs)
          fi
          
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/ubuntu/$UBUNTU_VERSION/prod $CODENAME main" | sudo tee /etc/apt/sources.list.d/mssql-release.list

      - name: Install SQL Server tools
        run: |
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> $GITHUB_ENV
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc

      - name: Verify SQLCMD installation
        run: |
          /opt/mssql-tools/bin/sqlcmd -?
          echo "PATH contains: $PATH"

      - name: Test DEV SQL Server connection
        run: |
          echo "Testing connection to DEV server: $DEV_SQL_SERVER"
          /opt/mssql-tools/bin/sqlcmd -S "$DEV_SQL_SERVER" -U "$DEV_SQL_USER" -P "$DEV_SQL_PASSWORD" -Q "SELECT @@VERSION AS sql_version, DB_NAME() AS current_db;" -b -o test_output.log || echo "Connection test failed"
          echo "Connection test output:"
          cat test_output.log
        env:
          DEV_SQL_SERVER: ${{ secrets.DEV_SQL_SERVER }}
          DEV_SQL_USER: ${{ secrets.DEV_SQL_USER }}
          DEV_SQL_PASSWORD: ${{ secrets.DEV_SQL_PASSWORD }}

      - name: Run SQL Script on DEV
        run: |
          echo "Starting DEV database deployment"
          echo "Using server: $DEV_SQL_SERVER"
          echo "Using user: $DEV_SQL_USER"
          echo "Executing script: setup.sql"
          
          /opt/mssql-tools/bin/sqlcmd -S "$DEV_SQL_SERVER" -U "$DEV_SQL_USER" -P "$DEV_SQL_PASSWORD" -d master -i setup.sql -b -o sql_output.log || echo "SQL script execution failed"
          
          echo "Script execution output:"
          cat sql_output.log
          
          # Verify database was created
          echo "Verifying database creation:"
          /opt/mssql-tools/bin/sqlcmd -S "$DEV_SQL_SERVER" -U "$DEV_SQL_USER" -P "$DEV_SQL_PASSWORD" -Q "SELECT name FROM sys.databases WHERE name NOT IN ('master', 'tempdb', 'model', 'msdb');" -b -o db_check.log
          cat db_check.log
        env:
          DEV_SQL_SERVER: ${{ secrets.DEV_SQL_SERVER }}
          DEV_SQL_USER: ${{ secrets.DEV_SQL_USER }}
          DEV_SQL_PASSWORD: ${{ secrets.DEV_SQL_PASSWORD }}

  prod-deployment:
    name: Deploy to PROD
    needs: dev-deployment
    if: success()
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install prerequisites
        run: |
          sudo apt-get update
          sudo apt-get install -y curl gnupg lsb-release

      - name: Add Microsoft SQL Server repository
        run: |
          UBUNTU_VERSION=$(lsb_release -rs)
          if [[ "$UBUNTU_VERSION" == "24.04" ]]; then
            echo "Using Ubuntu 22.04 packages for compatibility"
            UBUNTU_VERSION="22.04"
            CODENAME="jammy"
          else
            CODENAME=$(lsb_release -cs)
          fi
          
          curl -sSL https://packages.microsoft.com/keys/microsoft.asc | sudo gpg --dearmor -o /usr/share/keyrings/microsoft.gpg
          echo "deb [arch=amd64 signed-by=/usr/share/keyrings/microsoft.gpg] https://packages.microsoft.com/ubuntu/$UBUNTU_VERSION/prod $CODENAME main" | sudo tee /etc/apt/sources.list.d/mssql-release.list

      - name: Install SQL Server tools
        run: |
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> $GITHUB_ENV
          echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc

      - name: Verify SQLCMD installation
        run: |
          /opt/mssql-tools/bin/sqlcmd -?
          echo "PATH contains: $PATH"

      - name: Test PROD SQL Server connection
        run: |
          echo "Testing connection to PROD server: $PROD_SQL_SERVER"
          /opt/mssql-tools/bin/sqlcmd -S "$PROD_SQL_SERVER" -U "$PROD_SQL_USER" -P "$PROD_SQL_PASSWORD" -Q "SELECT @@VERSION AS sql_version, DB_NAME() AS current_db;" -o test_output.log || echo "Connection test failed"
          echo "Connection test output:"
          cat test_output.log
        env:
          PROD_SQL_SERVER: ${{ secrets.PROD_SQL_SERVER }}
          PROD_SQL_USER: ${{ secrets.PROD_SQL_USER }}
          PROD_SQL_PASSWORD: ${{ secrets.PROD_SQL_PASSWORD }}

      - name: Run SQL Script on PROD
        run: |
          echo "Starting PROD database deployment"
          echo "Using server: $PROD_SQL_SERVER"
          echo "Using user: $PROD_SQL_USER"
          echo "Executing script: setup.sql"
          
          /opt/mssql-tools/bin/sqlcmd -S "$PROD_SQL_SERVER" -U "$PROD_SQL_USER" -P "$PROD_SQL_PASSWORD" -d master -i setup.sql -o sql_output.log || echo "SQL script execution failed"
          
          echo "Script execution output:"
          cat sql_output.log
          
          # Verify database was created
          echo "Verifying database creation:"
          /opt/mssql-tools/bin/sqlcmd -S "$PROD_SQL_SERVER" -U "$PROD_SQL_USER" -P "$PROD_SQL_PASSWORD" -Q "SELECT name FROM sys.databases WHERE name NOT IN ('master', 'tempdb', 'model', 'msdb');" -o db_check.log
          cat db_check.log
        env:
          PROD_SQL_SERVER: ${{ secrets.PROD_SQL_SERVER }}
          PROD_SQL_USER: ${{ secrets.PROD_SQL_USER }}
          PROD_SQL_PASSWORD: ${{ secrets.PROD_SQL_PASSWORD }}
